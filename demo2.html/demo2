<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>CanvasColock</title>
</head>

<body style="height:100%">
    <canvas id="canvas" style="height:100%"></canvas>
</body>
<script type="text/javascript" src="digit.js"></script>
<script type="text/javascript">
  
    var WINDOW_WIDTH;
    var WINDOW_HEIGHT;
    var RADIUS;
    var context = canvas.getContext("2d");
    var MARGIN_TOP;
    var MARGIN_LEFT;
    var showtime = new Date();
    var balls = [];
    const colors = ["#51F511", "#66FAD5", "#EF1C3E", "#FFFA5F", "#DE48CD", "#310CF2"];
    window.onload = function () {
        
        WINDOW_WIDTH = document.documentElement.clientWidth;
        WINDOW_HEIGHT = document.documentElement.clientHeight;
        MARGIN_LEFT = Math.round(WINDOW_WIDTH / 10);
        MARGIN_TOP = Math.round(WINDOW_HEIGHT / 5);
        RADIUS = Math.round(WINDOW_WIDTH * 4 / 5 / 108) - 1;
        var canvas = document.getElementById("canvas");
        showtime = new Date();
        canvas.width = WINDOW_WIDTH;
        canvas.height = WINDOW_HEIGHT;
        setInterval(function () {
            render(context);//
            update();//更新时间和小球变化
        }, 50);
    }
    function render(cxt) {//绘制小球
        cxt.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);//更新操作
        var hours = parseInt(showtime.getHours());//获取当前时间的小时数
        var minutes = parseInt(showtime.getMinutes());//获取当前时间的分钟数
        var seconds = parseInt(showtime.getSeconds());//获取当前时间的秒数
        renderDigit(MARGIN_LEFT, MARGIN_TOP, parseInt(hours / 10), cxt);
        renderDigit(MARGIN_LEFT + 15 * (RADIUS + 1), MARGIN_TOP, parseInt(hours % 10), cxt);
        renderDigit(MARGIN_LEFT + 30 * (RADIUS + 1), MARGIN_TOP, 10, cxt);
        renderDigit(MARGIN_LEFT + 39 * (RADIUS + 1), MARGIN_TOP, parseInt(minutes / 10), cxt);
        renderDigit(MARGIN_LEFT + 54 * (RADIUS + 1), MARGIN_TOP, parseInt(minutes % 10), cxt);
        renderDigit(MARGIN_LEFT + 69 * (RADIUS + 1), MARGIN_TOP, 10, cxt);
        renderDigit(MARGIN_LEFT + 78 * (RADIUS + 1), MARGIN_TOP, parseInt(seconds / 10), cxt);
        renderDigit(MARGIN_LEFT + 93 * (RADIUS + 1), MARGIN_TOP, parseInt(seconds % 10), cxt);
        for (var i = 0; i < balls.length; i++) {
            cxt.fillStyle = balls[i].color;
            cxt.beginPath();
            cxt.arc(balls[i].x, balls[i].y, RADIUS, 0, 2 * Math.PI, true);
            cxt.closePath();
            cxt.fill();
        }
    }
    function renderDigit(x, y, num, cxt) {
        //绘制小球
        cxt.fillStyle = "rgb(102,87,128)";
        for (var i = 0; i < digit[num].length; i++)
            for (var j = 0; j < digit[num][i].length; j++)
                if (digit[num][i][j] == 1) {
                    cxt.beginPath()
                    cxt.arc(x + (RADIUS + 1) + j * 2 * (RADIUS + 1), y + (RADIUS + 1) + i * 2 * (RADIUS + 1), RADIUS, 0, 2 * Math.PI);
                    cxt.closePath();
                    cxt.fill();
                }
    }
    function update() {
        var nextTime = new Date();
        var nexthours = parseInt(nextTime.getHours());
        var nextminutes = parseInt(nextTime.getMinutes());
        var nextseconds = parseInt(nextTime.getSeconds());
        var showhours = parseInt(showtime.getHours());
        var showminutes = parseInt(showtime.getMinutes());
        var showseconds = parseInt(showtime.getSeconds());
        if (nextTime != showtime) {//判断下一刻的时间与当前时间是否有变化
            if (parseInt(nexthours / 10) != parseInt(showhours / 10)) {
                addBalls(MARGIN_LEFT, MARGIN_TOP, parseInt(nexthours / 10));
            };
            if (parseInt(nexthours % 10) != parseInt(showhours % 10)) {
                addBalls(MARGIN_LEFT + 15 * (RADIUS + 1), MARGIN_TOP, parseInt(nexthours % 10));
            };
            if (parseInt(nextminutes / 10) != parseInt(showminutes / 10)) {
                addBalls(MARGIN_LEFT + 39 * (RADIUS + 1), MARGIN_TOP, parseInt(nextminutes / 10));
            };
            if (parseInt(nextminutes % 10) != parseInt(showminutes % 10)) {
                addBalls(MARGIN_LEFT + 54 * (RADIUS + 1), MARGIN_TOP, parseInt(nextminutes % 10));
            };
            if (parseInt(nextseconds / 10) != parseInt(showseconds / 10)) {
                addBalls(MARGIN_LEFT + 78 * (RADIUS + 1), MARGIN_TOP, parseInt(nextseconds / 10));
            };
            if (parseInt(nextseconds % 10) != parseInt(showseconds % 10)) {
                addBalls(MARGIN_LEFT + 93 * (RADIUS + 1), MARGIN_TOP, parseInt(nextseconds % 10));
            };        
}
        showtime = nextTime;
        updateBalls();
    }
    function updateBalls() {
        //设置小球的变化 
        for (var i = 0; i < balls.length; i++) {
            balls[i].x += balls[i].vx;
            balls[i].y += balls[i].vy;
            balls[i].vy += balls[i].g;
            if (balls[i].y > WINDOW_HEIGHT - RADIUS) {
                balls[i].y = WINDOW_HEIGHT - RADIUS;
                balls[i].vy = -balls[i].vy * 0.74;
            }
        }
        var count = 0;
        for (i = 0; i < balls.length; i++)
            if (balls[i].x + RADIUS > 0 && balls[i].x - RADIUS < WINDOW_WIDTH) {
                balls[count++] = balls[i]
            }
        while (balls.length > Math.min(count, 300)) {
            balls.pop();
        }
    }
    function addBalls(x, y, num) {
        //添加小球
        for (var i = 0; i < digit[num].length; i++)
            for (var j = 0; j < digit[num][i].length; j++)
                if (digit[num][i][j] == 1) {
                    var newBall = {
                        x: x + (RADIUS + 1) + j * 2 * (RADIUS + 1),
                        y: y + (RADIUS + 1) + i * 2 * (RADIUS + 1),
                        g: 1.5 + Math.random(),
                        vx: Math.pow(-1, Math.floor(Math.random() * 1000)) * 4,
                        vy: -Math.ceil(Math.random() * 8),
                        color: colors[Math.floor(Math.random() * colors.length)]
                    }
                    balls.push(newBall);
                }
    }
</script>

</html>
